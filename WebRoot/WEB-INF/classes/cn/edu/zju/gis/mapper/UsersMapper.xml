<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址
-->
<mapper namespace="cn.edu.zju.gis.mapper.UsersMapper">
	<!-- 在 映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过 select执行数据库查询
	id：标识 映射文件中的 sql
	将sql语句封装到mappedStatement对象中，所以将id称为statement的id
	parameterType：指定输入 参数的类型，这里指定int型 
	#{}表示一个占位符号
	#{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称
	
	resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。
	 -->
	<select id="findUsersById" parameterType="int" resultType="cn.edu.zju.gis.po.Users">
		SELECT * FROM USERS WHERE id=#{value}
	</select>
	<select id="findUser" parameterType="cn.edu.zju.gis.po.Users" resultType="cn.edu.zju.gis.po.Users">
		SELECT * FROM USERS WHERE username = #{username} and password = #{password}
	</select>
	<select id="findUserByName" parameterType="java.lang.String" resultType="cn.edu.zju.gis.po.Users">
		SELECT * FROM USERS WHERE username = #{value}
	</select>
	
	<select id="login" parameterType="cn.edu.zju.gis.po.Users" resultType="cn.edu.zju.gis.po.Users">
		SELECT * FROM USERS WHERE username=#{username} AND password=#{password}
	</select>	
	<insert id="register" parameterType="cn.edu.zju.gis.po.Users">
		INSERT INTO USERS(username,password,email,realname,comp,cretificate,cretifitype,authority)
		VALUES(#{username},#{password},#{email},#{realname},#{comp},#{cretificate},#{cretifitype},0)
	</insert>
	<select id="userExists" parameterType="cn.edu.zju.gis.po.Users" resultType="cn.edu.zju.gis.po.Users">
		SELECT * FROM USERS WHERE username=#{username}
	</select> 
	
	<insert id="insert_emailcheckcode" parameterType="cn.edu.zju.gis.po.email_checkcode">
		INSERT INTO email_checkcode(email,checkcode,createtime)
		VALUES(#{email},#{checkcode},#{createtime})
	</insert>
	<delete id="checkcodeemail_deleteduplicate" parameterType="cn.edu.zju.gis.po.email_checkcode">
		DELETE FROM email_checkcode WHERE email=#{email}
	</delete>
	
	<select id="checkcodeemail_iscorrect" parameterType="cn.edu.zju.gis.po.email_checkcode" resultType="int">
		SELECT count(*) FROM email_checkcode 
		WHERE email=#{email} AND checkcode=#{checkcode} AND createtime-#{createtime}&lt;300
	</select>
	
	<select id="findEmailByUsername" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT email FROM USERS WHERE username=#{username};
	</select>
	<select id="emailExists" parameterType="java.lang.String" resultType="cn.edu.zju.gis.po.Users">
		SELECT * FROM USERS WHERE email=#{email}
	</select>
	
	<update id="pwdOld" parameterType="cn.edu.zju.gis.po.Users" >
		UPDATE USERS SET password=#{pwdNew} WHERE username=#{username}
	</update>
	
	<update id="UpdatePasswordByEmail" parameterType="cn.edu.zju.gis.po.Users">
		UPDATE USERS SET password=#{pwdNew} WHERE email=#{email}
	</update>
</mapper>
